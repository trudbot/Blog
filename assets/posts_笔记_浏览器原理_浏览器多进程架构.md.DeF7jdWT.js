import{_ as a,c as t,o as e,a5 as r}from"./chunks/framework.Ga73L8fd.js";const u=JSON.parse('{"title":"浏览器多进程架构","description":"","frontmatter":{"date":"2024-06-16 17:07:12","title":"浏览器多进程架构","top":0,"lastUpdated":"2024-07-08 21:03:11"},"headers":[],"relativePath":"_posts/笔记/浏览器原理/浏览器多进程架构.md","filePath":"_posts/笔记/浏览器原理/浏览器多进程架构.md","lastUpdated":1721378190000}'),o={name:"_posts/笔记/浏览器原理/浏览器多进程架构.md"},i=r('<h2 id="浏览器多进程架构" tabindex="-1">浏览器多进程架构 <a class="header-anchor" href="#浏览器多进程架构" aria-label="Permalink to &quot;浏览器多进程架构&quot;">​</a></h2><h3 id="单进程架构的缺点" tabindex="-1">单进程架构的缺点 <a class="header-anchor" href="#单进程架构的缺点" aria-label="Permalink to &quot;单进程架构的缺点&quot;">​</a></h3><ol><li>稳定性</li></ol><p>如果浏览器所有的任务(页面渲染、插件)都以线程的形式运行在同一个进程中， 那么任何一个线程的崩溃， 都将导致进程的崩溃， 也就是浏览器的崩溃。</p><ol start="2"><li>安全性</li></ol><p>单进程下， 进程中的所有任务都能随意访问计算机资源， 无法进行权限管理。</p><p>在多进程架构下, 浏览器可以沙盒化某些功能，让特定进程发挥特定功能。例如，Chrome 浏览器会限制处理任意用户输入的进程（例如渲染程序进程）对任意文件的访问权限。</p><h3 id="多进程概览" tabindex="-1">多进程概览 <a class="header-anchor" href="#多进程概览" aria-label="Permalink to &quot;多进程概览&quot;">​</a></h3><p><img src="https://trudbot-md-img.oss-cn-shanghai.aliyuncs.com/arch.png" alt="image"></p><ol><li>多进程架构保证了浏览器不会因为某一个任务崩溃而崩溃, 标签页之间不会互相影响</li><li>限制了渲染进程的访问权限。由于渲染任务运行在独立的进程中， 这使得可以限制渲染进程的访问权限如网络、文件系统等等。 渲染进程不能直接访问其他渲染进程或操作系统， 只能和主进程通过 浏览器IPC系统进行通信。</li></ol><h4 id="浏览器主要有哪些进程" tabindex="-1">浏览器主要有哪些进程？ <a class="header-anchor" href="#浏览器主要有哪些进程" aria-label="Permalink to &quot;浏览器主要有哪些进程？&quot;">​</a></h4><p><img src="https://trudbot-md-img.oss-cn-shanghai.aliyuncs.com/%E6%88%AA%E5%B1%8F2024-06-16%20%E4%B8%8B%E5%8D%886.34.59.png" alt=""></p><ol><li>主进程. 主进程负责浏览器UI以及子进程的管理。</li><li>渲染进程。渲染进程负责web内容(html、css和javascript)的渲染和展示， 一般的每一个浏览器标签页就对应着一个渲染进程。</li><li>网络进程。</li><li>GPU进程。</li><li>插件进程。</li><li>等等</li></ol><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://www.chromium.org/developers/design-documents/multi-process-architecture/" target="_blank" rel="noreferrer">Multi-process Architecture (chromium.org)</a></p><p><a href="https://github.com/campcc/blog/issues/36" target="_blank" rel="noreferrer">浏览器原理：多进程架构 · Issue #36 · campcc/blog (github.com)</a></p>',16),l=[i];function s(c,h,n,p,d,_){return e(),t("div",null,l)}const b=a(o,[["render",s]]);export{u as __pageData,b as default};
