import{_ as s,c as a,o as i,a4 as n}from"./chunks/framework.CGZlA0yU.js";const o=JSON.parse('{"title":"react bug记录: useEffect中使用响应式变量","description":"","frontmatter":{"title":"react bug记录: useEffect中使用响应式变量","mathjax":true,"tags":["react","hooks"],"categories":["前端","react"],"abbrlink":50865,"date":"2023-09-19 03:02:15","lastUpdated":"2023-09-19 03:02:15"},"headers":[],"relativePath":"_posts/博客/react-bug记录-useEffect中使用响应式变量.md","filePath":"_posts/博客/react-bug记录-useEffect中使用响应式变量.md","lastUpdated":1719731109000}'),e={name:"_posts/博客/react-bug记录-useEffect中使用响应式变量.md"},t=n(`<p>在使用useEffect API时出现了一些错误， 折腾好一会， 只能感慨还是看文档不认真。</p><p>代码重现:</p><div class="language-react vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">react</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. 创建state</span></span>
<span class="line"><span>const [groups, setGroups] = useState([]);</span></span>
<span class="line"><span>2. 通过useEffect创建连接                                      </span></span>
<span class="line"><span>useEffect(() =&gt; {</span></span>
<span class="line"><span>  const connection = createUnreadMessageConnection({useinfo });</span></span>
<span class="line"><span>  connection.on(&#39;remind&#39;, (groupId: number) =&gt; {</span></span>
<span class="line"><span>  	3. 监听事件</span></span>
<span class="line"><span>    // 使用groups 值do something </span></span>
<span class="line"><span>  } </span></span>
<span class="line"><span>  return () =&gt; {</span></span>
<span class="line"><span>    connection.disconnect();</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span> }, [useInfo.state]);  </span></span>
<span class="line"><span>4. 异步请求数据</span></span>
<span class="line"><span> getUserGroup({ ... }).then(res =&gt; {</span></span>
<span class="line"><span>   setGroups(res)</span></span>
<span class="line"><span> })                                      </span></span>
<span class="line"><span>})</span></span></code></pre></div><p>以上是相关代码的执行流程。</p><p>代码中的bug最终反映在前端界面上， 经过排查， 发现是<code>3</code>处， groups始终是空数组也就是初始值。</p><p>这个bug原因也很简单， 在<a href="https://zh-hans.react.dev/learn/separating-events-from-effects" target="_blank" rel="noreferrer">将事件从 Effect 中分开 – React 中文文档</a>中提到</p><blockquote><p><a href="https://zh-hans.react.dev/learn/lifecycle-of-reactive-effects#react-verifies-that-you-specified-every-reactive-value-as-a-dependency" target="_blank" rel="noreferrer">Effect 读取的每一个响应式值都必须在其依赖项中声明</a></p></blockquote><p>也就是说在useEffect中读取的每一个响应式值都必须作为其依赖。</p><p>注意响应式值并不一定是state， 也可以是组件内部使用state计算得到的变量、函数等。</p><hr><p>要解决这个bug， 似乎将<code>groups</code>放入依赖列表就可以了， 就这么简单吗？</p><p>为什么要在useEffect建立连接呢， 因为如果放到组件函数体内， 组件每一次渲染，就会发起一次连接， 同时上一次连接会断开。</p><p>但从逻辑上， 只有当登录的用户信息变化时， 才需要重新建立连接， 所以useEffect非常适合这一个场景。</p><p>如果把groups放入依赖中， 每次groups变化， 都会重新连接， 这便又破坏了我们的连接逻辑。</p><p>来看useEffect中的代码。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> connection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createUnreadMessageConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({useinfo });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  connection.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;remind&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">groupId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  	3.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 监听事件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用groups 值do something </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><p>每次useinfo变化， 我们希望连接重新进行。 effect中的代码是响应式的， 但我们此刻希望， 即能通过依赖， 让一些逻辑保持响应式； 又可以在不依赖某些响应式值的状态下， 访问到它们的最新值(非响应式代码获取最新值)。</p><blockquote><p>你需要一个将这个非响应式逻辑和周围响应式 Effect 隔离开来的方法。</p></blockquote><h2 id="解决方法-包装" tabindex="-1">解决方法: 包装 <a class="header-anchor" href="#解决方法-包装" aria-label="Permalink to &quot;解决方法: 包装&quot;">​</a></h2><h3 id="useeffectevent" tabindex="-1">useEffectEvent <a class="header-anchor" href="#useeffectevent" aria-label="Permalink to &quot;useEffectEvent&quot;">​</a></h3><p><a href="https://zh-hans.react.dev/learn/separating-events-from-effects#declaring-an-effect-event" target="_blank" rel="noreferrer">将事件从 Effect 中分开 – React 文档</a>中， 提供了useEffectEvent API的用法。</p><p>简单说就是， 将非响应式代码包装到useEffectEvent 中， 然后在useEffect中调用， 就可以不影响Effect响应式逻辑的情况下， 去获取state的最新值。</p><p>从名字也可以看出来， 这是用在<code>useEffect</code>中的事件处理函数， 完美符合我们的需求。</p><blockquote><p>你可以将 Effect Event 看成和事件处理函数相似的东西。主要区别是事件处理函数只在响应用户交互的时候运行，而 Effect Event 是你在 Effect 中触发的。Effect Event 让你在 Effect 响应性和不应是响应式的代码间“打破链条”。</p></blockquote><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> onRemind</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useEffectEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 使用groups做些什么</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">connection.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;remind&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">groupId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onRemind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(groupId);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>但此API仍处于实验性， 还没有进入正式版本。</p><h3 id="reducer" tabindex="-1">Reducer <a class="header-anchor" href="#reducer" aria-label="Permalink to &quot;Reducer&quot;">​</a></h3><p>使用Reducer在某些情况下也可以实现对state的包装， reducer被创建后， 本身一般是不会被改变的， 它接收用户的操作， 在内部对state进行更改。 因此我们在useEffect内部， 可以通过Reducer这一中间层， 间接的对state进行修改。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> groupDataReducer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(action) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;remind&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// do something</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useReducer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(groupDataReducer, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	groups: [],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">connection.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;remind&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">groupId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;remind&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    value: groupId</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><p>我真幸运， 第一次写react就遇到了react的小缺陷(maybe)。</p>`,31),p=[t];function l(h,k,r,c,E,d){return i(),a("div",null,p)}const u=s(e,[["render",l]]);export{o as __pageData,u as default};
