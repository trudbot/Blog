import{_ as a,c as i,a3 as n,o as l}from"./chunks/framework.IHFMfAia.js";const o=JSON.parse('{"title":"有点学问在的缩进风格","description":"","frontmatter":{"title":"有点学问在的缩进风格","author":"trudbot","tags":["缩进风格"],"categories":"杂谈","abbrlink":57442,"date":"2022-08-19 17:20:29","lastUpdated":"2024-08-23 20:23:18"},"headers":[],"relativePath":"_posts/博客/有点学问的缩进风格.md","filePath":"_posts/博客/有点学问的缩进风格.md","lastUpdated":1724415864000}'),p={name:"_posts/博客/有点学问的缩进风格.md"};function t(e,s,h,k,r,d){return l(),i("div",null,s[0]||(s[0]=[n(`<h3 id="什么是缩进风格" tabindex="-1">什么是缩进风格 <a class="header-anchor" href="#什么是缩进风格" aria-label="Permalink to &quot;什么是缩进风格&quot;">​</a></h3><p>缩进风格是代码风格的一部分， 是自发形成的一种约定， 用控制代码块缩进的方式传达程序的结构。</p><p>缩进风格可以分为两个方面：<code>缩进大小</code>和<code>大括号位置</code>。</p><h3 id="缩进大小" tabindex="-1">缩进大小 <a class="header-anchor" href="#缩进大小" aria-label="Permalink to &quot;缩进大小&quot;">​</a></h3><p>缩进在大部分语言中并不是强制要求， 但合理的缩进有利于人类理解程序的结构， 即提高了代码的清晰性。</p><blockquote><p>1983年在PASCAL代码上进行的一项实验发现，缩进大小显着影响了可理解性。2 到 4 个字符之间的缩进大小被证明是最佳的。</p></blockquote><p>在大部分的程序语言中， 默认使用四个空格或一个tab键（制表符可以与空格互相转换， 一个&#39;\\t&#39;等于4个空格）</p><p>在部分的脚本语言或HTML中， 可能会使用2个空格， 以避免过长的缩进。</p><p>下文中介绍的风格默认使用4字符缩进。</p><h3 id="大括号位置" tabindex="-1">大括号位置 <a class="header-anchor" href="#大括号位置" aria-label="Permalink to &quot;大括号位置&quot;">​</a></h3><p>大括号用于声明程序的控制语句的作用域， 跟在<code>(····)</code>后面。</p><p>下面将介绍几种主流的大括号风格。</p><h4 id="allman风格" tabindex="-1">Allman风格 <a class="header-anchor" href="#allman风格" aria-label="Permalink to &quot;Allman风格&quot;">​</a></h4><p>由一位大牛的名字命名， 又叫做<code>BSD</code>风格。</p><p>该风格的特点是大括号放到控制语句的下一行， 且与控制语句的缩进相同。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cond)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cond)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //do something</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cond)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //do something</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //do something</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>可以发现代码块中的代码与控制语句形成明显的区分， 左右大括号位于同一列， 一般而言对人来说更容易匹配到对应的带括号。</p><p>allman风格由于其清晰的代码结构， 常被用于教育。但它的缺点是，当代码块较短时（特别是只有一句）， 过多的空行会导致程序很长， 容易让人产生阅读压力以及抓不住焦点。</p><h4 id="k-r风格" tabindex="-1">K&amp;R风格 <a class="header-anchor" href="#k-r风格" aria-label="Permalink to &quot;K&amp;R风格&quot;">​</a></h4><p>不知道你是否听说过被誉为 <code>“C语言圣经“</code>的《C程序设计语言》(<em><code>The C programming language</code></em>)， 这本书由两位大牛Kernighan &amp; Ritchie （K&amp;R）编写， 其中Ritchie正是C语言的创造者。</p><p>K&amp;R风格便是在这本书中使用的缩进风格， 同时K&amp;R风格及其变体也是目前使用最广泛的风格。</p><p>K&amp;R风格的特点：</p><ul><li>函数的大括号位于单独一行</li><li>控制语句的左大括号不换行， else或else if不换行</li><li>只有一条语句的代码块不使用大括号, 而是换行后缩进</li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cond) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cond) </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   puts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;K&amp;R &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cond)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   puts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;is best style!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cond) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// )与{中间有空格， 这属于其他部分的代码风格</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //do something</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cond) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //do something</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //do something</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>差不多也能体会到， K&amp;R风格总结起来就是：尽可能的压缩代码。 有人分析这是因为这些代码是要打印到书籍上的， 为了降低成本而尽可能的减少代码行数， 因此也有人称之为印刷风格。</p><p>K&amp;R的缺点十分明显：左大括号不好找， 尤其在代码块较长时， 很容易找错左大括号。 就可读性而言确实是比不上Allman的， 但在现代IDE智能的高亮和匹配功能下， 也还行？</p><h4 id="k-r变体-1tbs" tabindex="-1">K&amp;R变体 - 1TBS <a class="header-anchor" href="#k-r变体-1tbs" aria-label="Permalink to &quot;K&amp;R变体 - 1TBS&quot;">​</a></h4><p>”一个真正的大括号风格“（One True Brace Style）， 是K&amp;R的变体之一， 主要区别是：1TBS强制使用大括号， 也就是说即使只有一行也需要用大括号而不能省略。</p><p>1TBS存在的真实性存有疑问， 有些人认为它是如上所述的K&amp;R变体， 有些人指出它不过是K&amp;R的”行话“。</p><h4 id="whitesmiths风格" tabindex="-1">Whitesmiths风格 <a class="header-anchor" href="#whitesmiths风格" aria-label="Permalink to &quot;Whitesmiths风格&quot;">​</a></h4><p>特点是大括号需要换行， 且需要缩进</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cond)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> puts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This is the whitesmiths style&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cond)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> puts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;like it?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><h4 id="圣战" tabindex="-1">圣战 <a class="header-anchor" href="#圣战" aria-label="Permalink to &quot;圣战&quot;">​</a></h4><p>Allman风格(左括号换行， 位于左边)和K&amp;R风格(左括号不换行， 位于右边)是两种最广泛使用的大括号风格， 无数程序员争论到底哪种才是最好的。</p><p>在舆论上Allman总是占优， K&amp;R被称为&quot;过时&quot;/&quot;伤害眼睛”。但K&amp;R在早期大牛的影响下（如java API源码, linux源码， golang语法风格等等)的影响下， 在除C外的领域仍然是最主流的风格。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>永远不存在所谓正确的缩进风格， 最重要的事情是在整个程序中都保持一致的代码风格。</p><hr><h3 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h3><p><a href="https://en.wikipedia.org/wiki/Indentation_style#cite_note-catb.org-7" target="_blank" rel="noreferrer">缩进样式 - 维基百科)</a></p><p><a href="http://catb.org/jargon/html/I/indent-style.html" target="_blank" rel="noreferrer">缩进样式 (catb.org)</a></p><p><a href="https://www.slant.co/topics/2478/~best-indentation-style-in-c" target="_blank" rel="noreferrer">indentation style - Slant</a></p>`,42)]))}const c=a(p,[["render",t]]);export{o as __pageData,c as default};
