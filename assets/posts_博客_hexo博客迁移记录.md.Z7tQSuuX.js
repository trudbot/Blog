import{_ as s,c as a,o as i,a5 as n}from"./chunks/framework.0F8mtAAj.js";const E=JSON.parse('{"title":"博客迁移记录","description":"","frontmatter":{"title":"博客迁移记录","mathjax":true,"tags":["笔记","git","nginx","ssl"],"categories":"杂谈","abbrlink":41626,"date":"2023-07-07 02:57:44","lastUpdated":"2023-07-07 02:57:44"},"headers":[],"relativePath":"_posts/博客/hexo博客迁移记录.md","filePath":"_posts/博客/hexo博客迁移记录.md","lastUpdated":1718520894000}'),p={name:"_posts/博客/hexo博客迁移记录.md"},l=n(`<p>主要记录一下本次耗时一两天博客的迁移过程。</p><h2 id="服务器部署" tabindex="-1">服务器部署 <a class="header-anchor" href="#服务器部署" aria-label="Permalink to &quot;服务器部署&quot;">​</a></h2><p>Hexo框架的原理就是生成模板式的静态页面， 然后通过git推送到仓库。</p><p>所以在服务器上要做的事也很简单:</p><ul><li>创建git仓库</li><li>创建静态web服务器</li></ul><h3 id="创建git仓库" tabindex="-1">创建git仓库 <a class="header-anchor" href="#创建git仓库" aria-label="Permalink to &quot;创建git仓库&quot;">​</a></h3><p>这里其实可以细化为两步， 因为git仓库中的代码必须要暴露出来供web服务器访问， 所以就多了一个创建钩子和静态目录的过程。</p><p>为了避免麻烦的权限问题， 我选择全部在root账号下完成。</p><ul><li>安装git</li><li>将公钥上传到服务器root用户下(推送无需输入密码)</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh-copy-id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.ssh/id_rsa.pub</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root@server-ip</span></span></code></pre></div><ul><li>在<code>/var</code>目录下创建仓库(此步完成后， 可以使用git clone root@server-ip:/var/repo/blog.git 来测试是否能正常连接仓库</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/repo</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/repo</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --bare</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> blog.git</span></span></code></pre></div><ul><li>创建静态文件目录</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/www/hexo</span></span></code></pre></div><ul><li>配置钩子</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/repo/blog.git/hooks/post-receive</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">写入如下内容:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --work-tree=/var/www/hexo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --git-dir=/var/repo/blog.git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">特别重要的一步，</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 添加执行权限：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/repo/blog.git/hooks/post-receive</span></span></code></pre></div><ul><li>本地<code>_config.yml</code>, deploy选项中加入</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  - type: git</span></span>
<span class="line"><span>    repository: root@server-ip:/var/repo/blog.git</span></span>
<span class="line"><span>    branch: master</span></span></code></pre></div><p>完成后， 进行推送: <code>hexo d</code>， 成功推送到<code>/var/www/hexo</code>目录下即成功。</p><h3 id="配置nginx服务器" tabindex="-1">配置nginx服务器 <a class="header-anchor" href="#配置nginx服务器" aria-label="Permalink to &quot;配置nginx服务器&quot;">​</a></h3><ul><li>安装nginx, <code>yum install nginx -y</code></li><li>使用yum安装nginx时， 默认的目录如下</li></ul><div class="language-F# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">F#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">etc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nginx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 配置文件目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">log</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nginx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">error.log， 日志文件的路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">usr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sbin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nginx， 可执行文件的路径</span></span></code></pre></div><ul><li>进入nginx目录(yum安装时， 为/etc/nginx)， 在<code>conf.d</code>目录下新建<code>blog.conf</code>文件， 写入如下内容</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>server {</span></span>
<span class="line"><span>    listen    80 default_server;</span></span>
<span class="line"><span>    listen    [::] default_server;</span></span>
<span class="line"><span>    server_name    trudbot.cn;</span></span>
<span class="line"><span>    root    /var/www/hexo;</span></span>
<span class="line"><span>    error_page 404 404.html;</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>打开nginx目录下的<code>nginx.conf</code>文件， 修改用户为&#39;root&#39;</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>user root;</span></span></code></pre></div><ul><li>重启nginx服务</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>systemctl restart nginx</span></span></code></pre></div><p>完成后， 浏览器访问服务器ip, 显示博客界面即为成功。</p><h3 id="扩展——nginx配置文件详解" tabindex="-1">扩展——nginx配置文件详解 <a class="header-anchor" href="#扩展——nginx配置文件详解" aria-label="Permalink to &quot;扩展——nginx配置文件详解&quot;">​</a></h3><p>nginx的主配置文件为<code>nginx.conf</code>, 结构大致如下</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 全局配置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">user </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">worker_processes </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">auto;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error_log </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/var/log/nginx/error.log;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pid </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/run/nginx.pid;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">include </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/usr/share/nginx/modules/*.conf;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># event配置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">events</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    worker_connections </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># http配置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    log_format </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> main</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">remote_addr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> - $</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">remote_user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> [$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">time_local</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">] &quot;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">request</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                      &#39;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">body_bytes_sent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http_referer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                      &#39;&quot;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http_user_agent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &quot;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http_x_forwarded_for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    access_log </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /var/log/nginx/access.log  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    sendfile </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    tcp_nopush </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    tcp_nodelay </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    keepalive_timeout </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  65</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    types_hash_max_size </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4096</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    include </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            /etc/nginx/mime.types;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    default_type </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       application/octet-stream;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    include </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/etc/nginx/conf.d/*.conf;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        listen </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      [::]:80;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        root </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        /usr/share/nginx/html;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # Load configuration files for the default server block.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        include </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/etc/nginx/default.d/*.conf;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        error_page </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">404</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /404.html;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> /40x.html </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        error_page </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 502</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 503</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 504</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /50x.html;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> /50x.html </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="全局模块" tabindex="-1">全局模块 <a class="header-anchor" href="#全局模块" aria-label="Permalink to &quot;全局模块&quot;">​</a></h4><blockquote><p>全局块是默认配置文件从开始到events块之间的一部分内容，主要设置一些影响Nginx服务器整体运行的配置指令，因此，这些指令的作用域是Nginx服务器全局。</p><p>通常包括配置运行Nginx服务器的用户（组）、允许生成的worker process数、Nginx进程PID存放路径、日志的存放路径和类型以及配置文件引入等。</p></blockquote><h4 id="events模块" tabindex="-1">events模块 <a class="header-anchor" href="#events模块" aria-label="Permalink to &quot;events模块&quot;">​</a></h4><blockquote><p>events块涉及的指令主要影响Nginx服务器与用户的网络连接。常用到的设置包括是否开启对多worker process下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型处理连接请求，每个worker process可以同时支持的最大连接数等。</p><p>这一部分的指令对Nginx服务器的性能影响较大，在实际配置中应该根据实际情况灵活调整。</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>events {</span></span>
<span class="line"><span>    worker_connections 1024;    # 每个工作进程最大并发连接数</span></span>
<span class="line"><span>    use epoll;                  # 使用epoll网络模型，提高性能</span></span>
<span class="line"><span>    multi_accept on;            # 开启支持多个连接同时建立</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="http模块" tabindex="-1">http模块 <a class="header-anchor" href="#http模块" aria-label="Permalink to &quot;http模块&quot;">​</a></h4><blockquote><p>http块是Nginx服务器配置中的重要部分，代理、缓存和日志定义等绝大多数的功能和第三方模块的配置都可以放在这个模块中。</p><p>前面已经提到，http块中可以包含自己的全局块，也可以包含server块，server块中又可以进一步包含location块，在本书中我们使用“http全局块”来表示http中自己的全局块，即http块中不包含在server块中的部分。</p></blockquote><h5 id="server模块" tabindex="-1">server模块 <a class="header-anchor" href="#server模块" aria-label="Permalink to &quot;server模块&quot;">​</a></h5><p>一个server就相当于一个虚拟主机，一台nginx内部可有多台虚拟主机联合提供服务，一起对外提供在逻辑上关系密切的一组服务（或网站）。</p><p>常用配置如下</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">listen：监听的端口，默认为80</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server_name：服务器名，如localhost、www.example.com，可以通过正则匹配</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root：站点根目录，即网站程序存放目录 </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index：查询排序，先查询第一个文件是否存在，再查询第二个，一直查询下去，直到查询到</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error_page </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">：错误页面， 如error_page </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">404</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 404.html</span></span></code></pre></div><p>1、基于ip的虚拟主机， (一个主机绑定多个ip地址)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>server{</span></span>
<span class="line"><span>  listen       192.168.1.1:80;</span></span>
<span class="line"><span>  server_name  localhost;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>server{</span></span>
<span class="line"><span>  listen       192.168.1.2:80;</span></span>
<span class="line"><span>  server_name  localhost;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>2、基于域名的虚拟主机(servername)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#域名可以有多个，用空格隔开</span></span>
<span class="line"><span>server{</span></span>
<span class="line"><span>  listen       80;</span></span>
<span class="line"><span>  server_name  www.nginx1.com www.nginx2.com;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>server{</span></span>
<span class="line"><span>  listen       80;</span></span>
<span class="line"><span>  server_name  www.nginx3.com;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>3、基于端口的虚拟主机(listen不写ip的端口模式)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>server{</span></span>
<span class="line"><span>  listen       80;</span></span>
<span class="line"><span>  server_name  localhost;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>server{</span></span>
<span class="line"><span>  listen       81;</span></span>
<span class="line"><span>  server_name  localhost;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h5 id="location模块" tabindex="-1">location模块 <a class="header-anchor" href="#location模块" aria-label="Permalink to &quot;location模块&quot;">​</a></h5><p>location模块用于处理一个server中特定的url。</p><p>在Nginx的官方文档中定义的location的语法结构为：</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> [ = | ~ | ~* | ^~ ] uri </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ ... }</span></span></code></pre></div><blockquote><p>其中，uri变量是待匹配的请求字符串，可以是不含正则表达的字符串，如/myserver.php等；也可以是包含有正则表达的字符串，如 .php$（表示以.php结尾的URL）等。为了下文叙述方便，我们约定，不含正则表达的uri称为“标准uri”，使用正则表达式的uri称为“正则uri”。</p><p>其中方括号里的部分，是可选项，用来改变请求字符串与 uri 的匹配方式。在介绍四种标识的含义之前，我们需要先了解不添加此选项时，Nginx服务器是如何在server块中搜索并使用location块的uri和请求字符串匹配的。</p><p>在不添加此选项时，Nginx服务器首先在server块的多个location块中搜索是否有标准uri和请求字符串匹配，如果有多个可以匹配，就记录匹配度最高的一个。然后，服务器再用location块中的正则uri和请求字符串匹配，当第一个正则uri匹配成功，结束搜索，并使用这个location块处理此请求；如果正则匹配全部失败，就使用刚才记录的匹配度最高的location块处理此请求。</p><p>了解了上面的内容，就可以解释可选项中各个标识的含义了：</p><ul><li>“=”，用于标准uri前，要求请求字符串与uri严格匹配。如果已经匹配成功，就停止继续向下搜索并立即处理此请求。</li><li>“^～”，用于标准uri前，要求Nginx服务器找到标识uri和请求字符串匹配度最高的location后，立即使用此location处理请求，而不再使用location块中的正则uri和请求字符串做匹配。</li><li>“～”，用于表示uri包含正则表达式，并且区分大小写。</li><li>“～<code>*</code>”，用于表示uri包含正则表达式，并且不区分大小写。注意如果uri包含正则表达式，就必须要使用“～”或者“～*”标识。</li></ul></blockquote><p>location下常用的配置有:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>root: 根目录</span></span>
<span class="line"><span>alisa: </span></span>
<span class="line"><span>index： 入口文件</span></span>
<span class="line"><span>error_page: 异常处理</span></span>
<span class="line"><span>proxy_pass： 反省代理配置</span></span></code></pre></div><h2 id="图床迁移" tabindex="-1">图床迁移 <a class="header-anchor" href="#图床迁移" aria-label="Permalink to &quot;图床迁移&quot;">​</a></h2><p>在此之前图床一直是白嫖的<code>github</code>免费仓库， 但github图床的连接是被墙的， 既然博客已经迁移到国内服务器， 图片还流落海外就不太合适。</p><p>我的解决方案是<strong>阿里云OSS</strong> + <strong>picgo</strong>, 没错， 还是picgo， 主要是它配合typora是真舒服。</p><p><strong>阿里云OSS图床创建</strong>： <a href="https://www.nickxu.top/2022/03/28/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%83%EF%BC%89%E9%98%BF%E9%87%8C%E4%BA%91-OSS-%E5%9B%BE%E5%BA%8A/" target="_blank" rel="noreferrer">Hexo + Butterfly 建站指南（七）阿里云 OSS 图床</a></p><p><strong>picgo插件进行图床迁移</strong>: <a href="https://cloud.tencent.com/developer/article/1975652" target="_blank" rel="noreferrer">利用 PicGo 快速迁移 Gitee 图床外链图片到服务器</a></p><h2 id="域名备案" tabindex="-1">域名备案 <a class="header-anchor" href="#域名备案" aria-label="Permalink to &quot;域名备案&quot;">​</a></h2><p>域名备案到服务器厂商。</p><h2 id="https配置" tabindex="-1">HTTPS配置 <a class="header-anchor" href="#https配置" aria-label="Permalink to &quot;HTTPS配置&quot;">​</a></h2><ul><li><p>为域名申请SSL证书， 这里不赘述这部分。</p></li><li><p>下载证书文件包含<code>域名.pem，域名.key</code>， 将两个文件上传到服务器。</p></li><li><p>在<code>/etc/nginx/conf.d</code>目录下新增配置文件<code>ssl.conf</code>， 写入如下内容</p></li></ul><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         443</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ssl http2;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#使用http2协议</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    trudbot.cn;       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#申请SSL证书的域名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  			root </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   /var/www/hexo;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ssl_certificate </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/etc/nginx/ssl/www.trudbot.cn.pem;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#申请的证书文件，写上全路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ssl_certificate_key </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    /etc/nginx/ssl/www.trudbot.cn.key;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#申请的证书文件，写上全路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ssl_protocols </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  TLSv1 TLSv1.1 TLSv1.2;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Strict-Transport-Security </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;max-age=31536000; includeSubDomains;preload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> always;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       #https性能优化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       ssl_prefer_server_ciphers </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       ssl_ciphers </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ssl_stapling </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ssl_stapling_verify </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ssl_trusted_certificate </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/etc/nginx/ssl/www.trudbot.cn.pem;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ssl_buffer_size </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4k</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ssl_session_cache </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">shared:SSL:10m;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ssl_session_timeout </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        #减少点击劫持</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X-Frame-Options DENY;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        #禁止服务器自动解析资源类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X-Content-Type-Options nosniff;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        #防XSS攻擊</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X-Xss-Protection </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			  #资源目录配置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                         index </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  index.html;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>注意前提是nginx安装了ssl模块， 使用yum安装的nginx已经自带， 使用其它方法安装时可能需要手动安装nginx的ssl模块。</p><p>添加完后访问<code>https://IP</code>测试是否能成功通过https访问。</p><h2 id="cdn失效替换" tabindex="-1">CDN失效替换 <a class="header-anchor" href="#cdn失效替换" aria-label="Permalink to &quot;CDN失效替换&quot;">​</a></h2><p>jsdelivr目前处于半墙状态， 而很多npm包中都使用了jsdelivr托管css和js文件， 其实包括mathjax和katex， 缺少这些博客文章将无法渲染。</p><p>解决方法之一是， 将这些文件下载到本地， 然后在public中替换所有的cdn.jsdelivr链接。</p><p>这种方法的好处是一劳永逸， 不用再担心cdn失效问题。</p><ul><li>下载所有文件到指定路径， 如<code>https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js</code>下载为<code>source/npm/mathjax@3/es5/tex-mml-chtml.js</code></li><li>编写shell脚本进行替换, 保存为<code>switch.sh</code>文件</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#!/usr/bin/env sh</span></span>
<span class="line"><span># author: trudbot</span></span>
<span class="line"><span># Description: invalid cdn switch script</span></span>
<span class="line"><span></span></span>
<span class="line"><span>echo &quot;---------------- Invalid CDN switch local path file ----------------&quot;</span></span>
<span class="line"><span># 遍历指定目录及其子目录下的所有HTML文件</span></span>
<span class="line"><span>find ./public -type f -name &quot;*.html&quot; | while read -r file; do</span></span>
<span class="line"><span>    # 使用sed命令替换文件中的字符串</span></span>
<span class="line"><span>    sed -i &#39;s#https://cdn.jsdelivr.net/#/#g&#39; &quot;$file&quot;</span></span>
<span class="line"><span>    sed -i &#39;s#//cdn.jsdelivr.net/#/#g&#39; &quot;$file&quot;</span></span>
<span class="line"><span>    echo &quot;替换文件：$file&quot;</span></span>
<span class="line"><span>done</span></span>
<span class="line"><span>echo &#39;ok !&#39;</span></span></code></pre></div><ul><li>在bash中运行shell脚本文件即可执行替换</li></ul><hr><p>第二种解决方法是替换cdn源， 这可以在next主题的配置文件尾部进行配置。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://blog.csdn.net/qq_36431213/article/details/78164286" target="_blank" rel="noreferrer">yum 安装nginx 后 nginx的 目录_用yam下载的nginx的路径是什么_上官二狗的博客-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/356054248" target="_blank" rel="noreferrer">Hexo部署到云服务器指南-知乎</a></p><p><a href="https://learnku.com/articles/68510" target="_blank" rel="noreferrer">Hexo cdn.jsdelivr.net 等部分CDN引用无效的一种低成本解决方案 | 程序员论坛 (learnku.com)</a></p><p><a href="https://blog.csdn.net/admin123404/article/details/115707774" target="_blank" rel="noreferrer">执行.sh文件（shell脚本）的几种方式_执行sh_Zero .的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_36551991/article/details/118612282" target="_blank" rel="noreferrer">万字带你搞懂nginx的配置文件_nginx 配置_way_more的博客-CSDN博客</a></p><p><a href="https://www.cnblogs.com/54chensongxia/p/12938929.html" target="_blank" rel="noreferrer">Nginx配置文件详解 - 程序员自由之路 - 博客园 (cnblogs.com)</a></p>`,84),e=[l];function t(h,k,r,d,o,c){return i(),a("div",null,e)}const y=s(p,[["render",t]]);export{E as __pageData,y as default};
